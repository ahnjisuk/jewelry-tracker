<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üíé Jewelry Production Tracker</title>
    
    <!-- React ÎùºÏù¥Î∏åÎü¨Î¶¨Îì§ (ÏïàÏ†ïÏ†ÅÏù∏ CDN) -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Inter', sans-serif; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 25%, #f093fb 50%, #f5576c 75%, #4facfe 100%); 
            background-size: 400% 400%; 
            animation: gradientShift 15s ease infinite; 
            min-height: 100vh; 
            color: white;
        }
        @keyframes gradientShift { 
            0% { background-position: 0% 50%; } 
            50% { background-position: 100% 50%; } 
            100% { background-position: 0% 50%; } 
        }
        .container { max-width: 7xl; margin: 0 auto; padding: 1rem; }
        .glass-card { 
            background: rgba(255, 255, 255, 0.15); 
            backdrop-filter: blur(20px); 
            border: 1px solid rgba(255, 255, 255, 0.3); 
            border-radius: 1.5rem; 
            padding: 2rem; 
            margin-bottom: 2rem;
            box-shadow: 0 15px 35px rgba(31, 38, 135, 0.5);
        }
        .gradient-button { 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
            border: none; 
            padding: 0.75rem 1.5rem;
            border-radius: 0.75rem;
            color: white;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease; 
        }
        .gradient-button:hover { 
            transform: translateY(-2px); 
            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.4); 
        }
        .input { 
            background: rgba(255, 255, 255, 0.9); 
            border: 2px solid transparent; 
            padding: 0.75rem 1rem;
            border-radius: 0.75rem;
            transition: all 0.3s ease; 
            width: 100%;
            margin-bottom: 1rem;
        }
        .input:focus { 
            background: rgba(255, 255, 255, 1); 
            border-color: #667eea; 
            outline: none; 
        }
        .table { width: 100%; border-collapse: collapse; }
        .table th, .table td { padding: 1rem; text-align: left; border-bottom: 1px solid rgba(255,255,255,0.1); }
        .table th { background: rgba(255,255,255,0.1); }
        .process-btn { 
            width: 2rem; height: 2rem; 
            border-radius: 50%; 
            border: none; 
            cursor: pointer; 
            font-size: 1.2rem;
            transition: all 0.3s ease;
        }
        .process-btn.completed { background: #10b981; }
        .process-btn.incomplete { background: rgba(255,255,255,0.2); }
        .process-btn:hover { transform: scale(1.1); }
        .stat-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem; margin-bottom: 2rem; }
        .stat-card { 
            background: rgba(255, 255, 255, 0.1); 
            backdrop-filter: blur(20px); 
            border: 1px solid rgba(255, 255, 255, 0.2); 
            border-radius: 1rem; 
            padding: 1.5rem;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        .stat-card::before { 
            content: ''; 
            position: absolute; 
            top: 0; left: 0; right: 0; 
            height: 3px; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
        }
        .stat-card:hover { transform: translateY(-5px); }
        .modal { 
            position: fixed; top: 0; left: 0; 
            width: 100%; height: 100%; 
            background: rgba(0,0,0,0.5); 
            display: flex; align-items: center; justify-content: center;
            z-index: 1000;
        }
        .modal-content { 
            background: rgba(255, 255, 255, 0.15); 
            backdrop-filter: blur(20px); 
            border-radius: 1rem; 
            padding: 2rem; 
            max-width: 500px; 
            width: 90%;
        }
        .floating-btn { 
            position: fixed; 
            bottom: 2rem; right: 2rem; 
            width: 60px; height: 60px; 
            border-radius: 50%; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
            border: none; 
            color: white; 
            font-size: 1.5rem; 
            cursor: pointer; 
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
            transition: all 0.3s ease;
            z-index: 999;
        }
        .floating-btn:hover { transform: scale(1.1); }
        .notification { 
            position: fixed; 
            top: 1rem; right: 1rem; 
            background: linear-gradient(135deg, #10b981 0%, #059669 100%); 
            color: white; 
            padding: 1rem; 
            border-radius: 0.75rem; 
            z-index: 1001;
            animation: slideIn 0.3s ease;
        }
        @keyframes slideIn { 
            from { transform: translateX(100%); opacity: 0; } 
            to { transform: translateX(0); opacity: 1; } 
        }
    </style>
</head>
<body>
    <div id="root">
        <div style="text-align: center; padding: 2rem;">
            <h1 style="font-size: 2rem; margin-bottom: 1rem;">üíé Jewelry Production Tracker</h1>
            <p>Loading React app...</p>
        </div>
    </div>

    <script type="text/babel">
        console.log('Script loading...');
        
        // React ÎùºÏù¥Î∏åÎü¨Î¶¨ ÌôïÏù∏
        if (typeof React === 'undefined') {
            console.error('React not loaded');
            document.getElementById('root').innerHTML = `
                <div style="text-align: center; padding: 2rem; color: white;">
                    <h1>‚ùå React Î°úÎî© Ïã§Ìå®</h1>
                    <p>React ÎùºÏù¥Î∏åÎü¨Î¶¨Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.</p>
                    <p>Ïù∏ÌÑ∞ÎÑ∑ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏ÌïòÍ≥† ÌéòÏù¥ÏßÄÎ•º ÏÉàÎ°úÍ≥†Ïπ®Ìï¥Ï£ºÏÑ∏Ïöî.</p>
                </div>
            `;
        } else {
            console.log('React loaded successfully');
            
            const { useState, useEffect, useCallback, useMemo } = React;

            const JewelryTracker = () => {
                const processes = [
                    { id: 'cad', name: 'CAD', icon: 'üñ•Ô∏è' },
                    { id: 'wax', name: 'Wax', icon: 'üñ®Ô∏è' },
                    { id: 'casting', name: 'Casting', icon: 'üî•' },
                    { id: 'filing', name: 'Filing', icon: 'üîß' },
                    { id: 'stone', name: 'Stone', icon: 'üíé' },
                    { id: 'engrave', name: 'Engrave', icon: '‚úèÔ∏è' },
                    { id: 'polish', name: 'Polish', icon: '‚ú®' },
                    { id: 'qc', name: 'QC', icon: 'üîç' }
                ];
                
                const [products, setProducts] = useState([
                    { id: 'P001', name: 'JY-01E', category: 'earring', material: 'Silver 925' },
                    { id: 'P002', name: 'JY-02E', category: 'earring', material: '14K Gold' },
                    { id: 'P003', name: 'JY-01N', category: 'necklace', material: '18K Gold' }
                ]);
                
                const [productionData, setProductionData] = useState({});
                const [showModal, setShowModal] = useState(false);
                const [notification, setNotification] = useState(null);
                const [formData, setFormData] = useState({ name: '', category: 'earring', material: '' });

                const updateProcess = (productId, processId) => {
                    setProductionData(prev => ({
                        ...prev,
                        [productId]: {
                            ...prev[productId],
                            [processId]: !prev[productId]?.[processId]
                        }
                    }));
                    setNotification('Process updated!');
                    setTimeout(() => setNotification(null), 3000);
                };

                const calculateProgress = (productId) => {
                    const data = productionData[productId] || {};
                    const completed = Object.values(data).filter(Boolean).length;
                    return Math.round((completed / processes.length) * 100);
                };

                const addProduct = () => {
                    if (!formData.name.trim()) return;
                    const newProduct = {
                        id: `P${String(Date.now()).slice(-3)}`,
                        name: formData.name.trim(),
                        category: formData.category,
                        material: formData.material.trim() || 'Unknown'
                    };
                    setProducts(prev => [...prev, newProduct]);
                    setFormData({ name: '', category: 'earring', material: '' });
                    setShowModal(false);
                    setNotification(`Product "${newProduct.name}" added!`);
                    setTimeout(() => setNotification(null), 3000);
                };

                const statistics = useMemo(() => {
                    const total = products.length;
                    const completed = products.filter(p => calculateProgress(p.id) === 100).length;
                    const inProgress = total - completed;
                    const avgProgress = total > 0 ? Math.round(products.reduce((sum, p) => sum + calculateProgress(p.id), 0) / total) : 0;
                    return { total, completed, inProgress, avgProgress };
                }, [products, productionData]);

                return (
                    <div className="container">
                        {notification && (
                            <div className="notification">
                                ‚úÖ {notification}
                            </div>
                        )}
                        
                        <div className="glass-card">
                            <div style={{ display: 'flex', alignItems: 'center', gap: '1rem', marginBottom: '1rem' }}>
                                <div style={{ fontSize: '2.5rem' }}>üíé</div>
                                <div>
                                    <h1 style={{ fontSize: '2.5rem', fontWeight: 'bold', marginBottom: '0.5rem' }}>
                                        Jewelry Production Tracker
                                    </h1>
                                    <p style={{ fontSize: '1.2rem', opacity: '0.8' }}>
                                        Modern Production Management System
                                    </p>
                                </div>
                            </div>
                        </div>
                        
                        <div className="stat-grid">
                            <div className="stat-card">
                                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '0.5rem' }}>
                                    <span>Total Products</span>
                                    <span style={{ fontSize: '1.5rem' }}>üë•</span>
                                </div>
                                <div style={{ fontSize: '2rem', fontWeight: 'bold' }}>{statistics.total}</div>
                            </div>
                            
                            <div className="stat-card">
                                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '0.5rem' }}>
                                    <span>Completed</span>
                                    <span style={{ fontSize: '1.5rem' }}>‚úÖ</span>
                                </div>
                                <div style={{ fontSize: '2rem', fontWeight: 'bold' }}>{statistics.completed}</div>
                            </div>
                            
                            <div className="stat-card">
                                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '0.5rem' }}>
                                    <span>In Progress</span>
                                    <span style={{ fontSize: '1.5rem' }}>‚è∞</span>
                                </div>
                                <div style={{ fontSize: '2rem', fontWeight: 'bold' }}>{statistics.inProgress}</div>
                            </div>
                            
                            <div className="stat-card">
                                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '0.5rem' }}>
                                    <span>Avg. Progress</span>
                                    <span style={{ fontSize: '1.5rem' }}>üìà</span>
                                </div>
                                <div style={{ fontSize: '2rem', fontWeight: 'bold' }}>{statistics.avgProgress}%</div>
                            </div>
                        </div>
                        
                        <div className="glass-card">
                            <table className="table">
                                <thead>
                                    <tr>
                                        <th>Product</th>
                                        <th>Progress</th>
                                        {processes.map(process => (
                                            <th key={process.id} style={{ textAlign: 'center' }}>
                                                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '0.25rem' }}>
                                                    <span style={{ fontSize: '1.5rem' }}>{process.icon}</span>
                                                    <span style={{ fontSize: '0.8rem' }}>{process.name}</span>
                                                </div>
                                            </th>
                                        ))}
                                    </tr>
                                </thead>
                                <tbody>
                                    {products.map(product => {
                                        const progress = calculateProgress(product.id);
                                        return (
                                            <tr key={product.id}>
                                                <td>
                                                    <div>
                                                        <div style={{ fontWeight: 'bold' }}>{product.name}</div>
                                                        <div style={{ fontSize: '0.9rem', opacity: '0.7' }}>{product.material}</div>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>
                                                        <div style={{ 
                                                            width: '100px', 
                                                            height: '8px', 
                                                            background: 'rgba(255,255,255,0.2)', 
                                                            borderRadius: '4px',
                                                            overflow: 'hidden'
                                                        }}>
                                                            <div style={{ 
                                                                width: `${progress}%`, 
                                                                height: '100%', 
                                                                background: progress === 100 ? '#10b981' : progress > 50 ? '#fbbf24' : '#f87171',
                                                                borderRadius: '4px'
                                                            }}></div>
                                                        </div>
                                                        <span style={{ fontWeight: '600' }}>{progress}%</span>
                                                    </div>
                                                </td>
                                                {processes.map(process => (
                                                    <td key={process.id} style={{ textAlign: 'center' }}>
                                                        <button 
                                                            onClick={() => updateProcess(product.id, process.id)}
                                                            className={`process-btn ${productionData[product.id]?.[process.id] ? 'completed' : 'incomplete'}`}
                                                        >
                                                            {productionData[product.id]?.[process.id] ? '‚úÖ' : '‚ö™'}
                                                        </button>
                                                    </td>
                                                ))}
                                            </tr>
                                        );
                                    })}
                                </tbody>
                            </table>
                        </div>
                        
                        <button 
                            onClick={() => setShowModal(true)}
                            className="floating-btn"
                        >
                            ‚ûï
                        </button>
                        
                        {showModal && (
                            <div className="modal" onClick={() => setShowModal(false)}>
                                <div className="modal-content" onClick={e => e.stopPropagation()}>
                                    <h2 style={{ fontSize: '1.5rem', fontWeight: 'bold', marginBottom: '1.5rem' }}>
                                        Add New Product
                                    </h2>
                                    
                                    <input 
                                        type="text"
                                        placeholder="Product Name"
                                        value={formData.name}
                                        onChange={e => setFormData(prev => ({ ...prev, name: e.target.value }))}
                                        className="input"
                                    />
                                    
                                    <select 
                                        value={formData.category}
                                        onChange={e => setFormData(prev => ({ ...prev, category: e.target.value }))}
                                        className="input"
                                    >
                                        <option value="earring">Earring</option>
                                        <option value="necklace">Necklace</option>
                                        <option value="bracelet">Bracelet</option>
                                        <option value="ring">Ring</option>
                                    </select>
                                    
                                    <input 
                                        type="text"
                                        placeholder="Material"
                                        value={formData.material}
                                        onChange={e => setFormData(prev => ({ ...prev, material: e.target.value }))}
                                        className="input"
                                    />
                                    
                                    <div style={{ display: 'flex', gap: '1rem', marginTop: '1rem' }}>
                                        <button 
                                            onClick={() => setShowModal(false)}
                                            style={{ 
                                                flex: 1, 
                                                padding: '0.75rem', 
                                                background: 'rgba(255,255,255,0.1)', 
                                                border: 'none', 
                                                borderRadius: '0.75rem', 
                                                color: 'white',
                                                cursor: 'pointer'
                                            }}
                                        >
                                            Cancel
                                        </button>
                                        <button 
                                            onClick={addProduct}
                                            className="gradient-button"
                                            style={{ flex: 1 }}
                                        >
                                            Add Product
                                        </button>
                                    </div>
                                </div>
                            </div>
                        )}
                    </div>
                );
            };

            // Î†åÎçîÎßÅ
            console.log('Rendering app...');
            const root = ReactDOM.createRoot(document.getElementById('root'));
            root.render(React.createElement(JewelryTracker));
            console.log('App rendered successfully!');
        }
    </script>
</body>
</html>
